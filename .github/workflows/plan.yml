# Runs basic terraform commands (fmt, validate, plan),
# and posts the results as a comment on the PR that triggered it.
name: "Plan"

on:
  workflow_call:
    inputs:
      github_ref:
        description: Override of GITHUB_REF environment variable (ie, what branch to run tf against)
        required: false
        type: string
        default: ''
      merge_prs:
        description: Flag to roll up all open PRs
        required: false
        type: boolean
        default: false
      merge_stage_prs:
        description: Flag to roll up open PRs with a "stage" label
        required: false
        type: boolean
        default: false
      tf_var_json:
        description: A JSON string to write into terraform.tfvars.json when planning.
        required: false
        type: string
      tf_version:
        description: Which version of terraform to use, eg. 1.1.2 or 0.15.5
        required: true
        type: string
      tf_prefix:
        description: The terraform backend's prefix within the GCS bucket
        required: false
        type: string
      tf_working_directory:
        description: The directory from which to run terraform commands
        required: false
        type: string
    secrets:
      CI_BOT_TOKEN:
        description: GITHUB_TOKEN environment variable to run merge_prs script
        required: false
      CI_BOT_USERNAME:
        description: GITHUB_USERNAME environment variable to run merge_prs script
        required: false
      tf_bucket:
        description: The terraform backend's GCS bucket
        required: true
      gcp_project_id:
        required: true
      gcp_service_account_key:
        required: true
      k8s_cluster_id:
        required: false
      k8s_cluster_zone:
        required: false
      ssh_agent_private_key:
        required: true

jobs:
  Plan:
    env:
      GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.CI_BOT_USERNAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref:  ${{ inputs.github_ref }}
          fetch-depth: 0

      - name: User config
        if: ${{ inputs.merge_prs || inputs.merge_stage_prs }}
        run: |-
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Rollup open PRs
        id: rollup_dev
        if: ${{ inputs.merge_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}
          output=$(git rev-parse HEAD)
          echo "HEAD is now at SHA: $output"
          echo "::set-output name=stdout::$output"

      - name: Rollup open stage PRs
        id: rollup_stage
        if: ${{ inputs.merge_stage_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}
          output=$(git rev-parse HEAD)
          echo "HEAD is now at SHA: $output"
          echo "::set-output name=stdout::$output"

      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.ssh_agent_private_key }}

      - uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - uses: google-github-actions/setup-gcloud@v0 # terraform-bot

      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials, so we can plan against the cluster
      - name: get-credentials
        # Workaround to https://github.com/actions/runner/issues/520
        env:
          HAS_CREDENTIALS: ${{ secrets.k8s_cluster_id && secrets.k8s_cluster_zone }}
        if: env.HAS_CREDENTIALS
        run: |-
          gcloud container clusters get-credentials ${{ secrets.k8s_cluster_id }} --zone ${{ secrets.k8s_cluster_zone }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: |-
          output=$(terraform fmt -diff -no-color)
          output="${output//$'\n'/\%0A}"
          if [[ -z $output ]]; then output="No formatting errors found."; fi
          echo "::set-output name=stdout::$output"
        continue-on-error: true
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Init
        id: init
        run: |-
          terraform init -backend-config="bucket=${{ secrets.tf_bucket }}" -backend-config="prefix=${{ inputs.tf_prefix }}" -reconfigure
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_git_sha: ${{ steps.rollup_stage.outputs.stdout || steps.rollup_dev.outputs.stdout || github.sha }}
        run: |-
          # Write the input to the varfile without substitution
          cat <<- EOF >> terraform.tfvars.json
            ${{ inputs.tf_var_json }}
          EOF
          terraform plan -input=false -no-color -out=terraform.plan | tee plan_output.txt
          # Use PIPESTATUS to capture errors in terraform apply:
          # See https://linux.samba.narkive.com/Oc6yBphD/clug-tee-eats-the-return-code-of-the-previous-entry-in-the-pipeline#post4
          tf_status=${PIPESTATUS[0]}
          output=$(cat plan_output.txt)
          output="${output/Note: Objects have changed*Terraform will perform the following actions/Terraform will perform the following actions}"
          output="${output//$'\n'/\%0A}"
          echo "::set-output name=stdout::$output"
          rm plan_output.txt
          exit $tf_status
        working-directory: ${{ inputs.tf_working_directory }}

      - uses: actions/github-script@v2.0.1
        if: github.event.issue.pull_request && (success() || failure())
        env:
          FMT_OUT: ${{ steps.fmt.outputs.stdout }}
          PLAN_OUT: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Initialization: Ô∏è${{ steps.init.outcome }}
            #### Format and Style:
            \`\`\`
            ${process.env.FMT_OUT}
            \`\`\`
            #### Validation: ${{ steps.validate.outcome }}
            #### Plan: ${{ steps.plan.outcome }}
            \`\`\`
            ${process.env.PLAN_OUT}
            \`\`\`
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: tfsec
        if: success() || failure()
        uses: reviewdog/action-tfsec@master
        with:
          reporter: github-pr-review
          fail_on_error: "false"
          filter_mode: "nofilter" # Check all files, not just the diff
