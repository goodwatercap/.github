# Runs basic terraform commands (fmt, validate, plan),
# and posts the results as a comment on the PR that triggered it.
name: "Plan"

on:
  workflow_call:
    inputs:
      github_ref:
        description: Override of GITHUB_REF environment variable (ie, what branch to run tf against)
        required: false
        type: string
        default: ''
      merge_prs:
        description: Flag to roll up all open PRs
        required: false
        type: boolean
        default: false
      merge_stage_prs:
        description: Flag to roll up open PRs with a "stage" label
        required: false
        type: boolean
        default: false
      post_result_comment:
        description: Whether or not to add a comment to the context's PR with the Terraform command results.
        required: false
        type: boolean
        default: true
      pr_issue_number:
        description: If set, overrides where to send the comments when posting
        required: false
        type: string
        default: ''
      really_actually_use_k8s:
        description: Help with deprecation of k8s parameters
        required: false
        type: boolean
        default: false
      skip_full_logs:
        description: Whether to skip posting the full terraform logs
        required: false
        type: boolean
        default: false
      tf_var_json:
        description: A JSON string to write into terraform.tfvars.json when planning.
        required: false
        type: string
      tf_version:
        description: Which version of terraform to use, eg. 1.1.2 or 0.15.5. If unset, reads .terraform-version in the repo root.
        required: false
        type: string
        default: ''
      tf_prefix:
        description: The terraform backend's prefix within the GCS bucket
        required: false
        type: string
      tf_working_directory:
        description: The directory from which to run terraform commands
        required: false
        type: string
        default: '.'
      tf_upgrade:
        description: Whether to upgrade the Terraform backend
        required: false
        type: boolean
        default: false
    secrets:
      CI_BOT_TOKEN:
        description: GITHUB_TOKEN environment variable to run merge_prs script
        required: false
      CI_BOT_USERNAME:
        description: GITHUB_USERNAME environment variable to run merge_prs script
        required: false
      tf_bucket:
        description: The terraform backend's GCS bucket
        required: true
      gcp_project_id:
        required: true
      gcp_service_account_key:
        required: true
      k8s_cluster_id:
        required: false
      k8s_cluster_zone:
        required: false
      ssh_agent_private_key:
        required: true

jobs:
  Plan:
    env:
      GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.CI_BOT_USERNAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref:  ${{ inputs.github_ref }}
          fetch-depth: 0

      - name: User config
        if: ${{ inputs.merge_prs || inputs.merge_stage_prs }}
        run: |-
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Rollup open PRs
        id: rollup_dev
        if: ${{ inputs.merge_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}

      - name: Rollup open stage PRs
        id: rollup_stage
        if: ${{ inputs.merge_stage_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}

      - name: Get current SHA
        id: get_sha
        run: |-
          sha=$(git rev-parse HEAD)
          echo "HEAD is now at SHA: $sha"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Get Terraform Version
        id: get_tf_version
        run: |-
          input_version=${{ inputs.tf_version }}
          if [[ -z $input_version ]]; then
            tf_version=`cat .terraform-version`
            echo "Using .terraform-version: $tf_version"
            echo "tf_version=$tf_version" >> "$GITHUB_OUTPUT"
          else
            echo "Using tf_version from input: $input_version"
            echo "tf_version=$input_version" >> "$GITHUB_OUTPUT"
          fi

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh_agent_private_key }}

      - uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - name: Use System GCloud
        uses: google-github-actions/setup-gcloud@v2
        if: ${{ ! inputs.really_actually_use_k8s }}
        with:
          skip_install: True

      - name: Setup GCloud with GKE Auth Plugin
        uses: google-github-actions/setup-gcloud@v2
        if: inputs.really_actually_use_k8s
        with:
          version: '>= 422.0.0'
          install_components: "gke-gcloud-auth-plugin"

      # Get the GKE credentials, so we can plan against the cluster
      - name: get-credentials
        # Workaround to https://github.com/actions/runner/issues/520
        if: inputs.really_actually_use_k8s
        run: |-
          gcloud container clusters get-credentials ${{ secrets.k8s_cluster_id }} --zone ${{ secrets.k8s_cluster_zone }}

      - name: Touch Files
        if: inputs.post_result_comment
        working-directory: ${{ inputs.tf_working_directory }}
        run: |-
          # Ensure files exist for the output script, even if steps fail
          touch init.txt
          touch fmt.txt
          touch validate.txt
          touch plan_output.txt
          touch full_output.txt
          touch plan_errors.txt

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.tf_version }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: |-
          terraform fmt -no-color -diff 2>&1 | tee fmt.txt
          tf_status=${PIPESTATUS[0]}

          if [[ -z $(cat fmt.txt) ]]; then echo "No formatting errors found." >> fmt.txt; fi
          exit $tf_status
        continue-on-error: true
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Init
        id: init
        run: |-
          if [[ -z ${{ inputs.tf_upgrade }} ]]; then
            tf_upgrade="-upgrade"
          else
            tf_upgrade=""
          fi
          terraform init -no-color $tf_upgrade -backend-config="bucket=${{ secrets.tf_bucket }}" -backend-config="prefix=${{ inputs.tf_prefix }}" -reconfigure 2>&1 | tee init.txt
          exit ${PIPESTATUS[0]}
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.tf_working_directory }}
        run: |-
          terraform validate -no-color 2>&1 | tee validate.txt
          exit ${PIPESTATUS[0]}

      - name: Write TFVars
        if: ${{ inputs.tf_var_json }}
        working-directory: ${{ inputs.tf_working_directory }}
        run: |-
          # Write the input to the varfile without substitution
          cat <<- EOF >> terraform.tfvars.json
            ${{ inputs.tf_var_json }}
          EOF

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_git_sha: ${{ steps.get_sha.outputs.stdout }}
        run: |-
          terraform plan -no-color -input=false -out=terraform.plan -lock-timeout=120s  2>plan_errors.txt | tee full_output.txt
          # Use PIPESTATUS to capture errors in terraform plan:
          # See https://linux.samba.narkive.com/Oc6yBphD/clug-tee-eats-the-return-code-of-the-previous-entry-in-the-pipeline#post4
          tf_status=${PIPESTATUS[0]}

          # Make sure errors are still visible in logs
          cat plan_errors.txt

          # Trim the preamble
          sed -E -n '/â”€\{10\}|Terraform will perform|No changes/,$p' full_output.txt > plan_output.txt

          exit $tf_status
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Trim logs
        if: ${{ inputs.skip_full_logs }}
        working-directory: ${{ inputs.tf_working_directory }}
        run: echo "Logs trimmed due to size" > full_output.txt

      - uses: actions/github-script@v7
        if: inputs.post_result_comment && (success() || failure())
        with:
          script: |
            const fs = require('fs')
            function truncate(text, maxLength) {
              if (text.length <= maxLength) {
                return text
              }
              const truncatedText = text.substring(0, maxLength)
              const truncationMessage = `\n\n... (truncated ${text.length - maxLength} characters)`
              return truncatedText + truncationMessage
            }
            const MAX_OUTPUT_LENGTH = 5000
            const PLAN_OUTPUT_LENGTH = 40000
            const init = truncate(fs.readFileSync('${{ inputs.tf_working_directory }}/init.txt', 'utf8'), MAX_OUTPUT_LENGTH)
            const fmt = truncate(fs.readFileSync('${{ inputs.tf_working_directory }}/fmt.txt', 'utf8'), MAX_OUTPUT_LENGTH)
            const validate = truncate(fs.readFileSync('${{ inputs.tf_working_directory }}/validate.txt', 'utf8'), PLAN_OUTPUT_LENGTH)
            const plan_output = truncate(fs.readFileSync('${{ inputs.tf_working_directory }}/plan_output.txt', 'utf8'), MAX_OUTPUT_LENGTH)
            const full_output = truncate(fs.readFileSync('${{ inputs.tf_working_directory }}/full_output.txt', 'utf8'), MAX_OUTPUT_LENGTH)
            const errors = fs.readFileSync('${{ inputs.tf_working_directory }}/plan_errors.txt', 'utf8')

            // Print combined length of all outputs
            const combinedLength =
              init.length +
              fmt.length +
              validate.length +
              plan_output.length +
              full_output.length +
              errors.length;
            console.log(`Combined length of plan step outputs: ${combinedLength}`);

            const issue_number = "${{ inputs.pr_issue_number }}" || context.issue.number
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            const output = `## Terraform Plan
            <details><summary><b>Initialization: ${{ steps.init.outcome }}</b></summary>

            \`\`\`
            ${init}
            \`\`\`

            </details>

            <details open><summary><b>Format and Style: ${{ steps.fmt.outcome }}</b></summary>

            \`\`\`diff
            ${fmt}
            \`\`\`

            </details>

            <details open><summary><b>Validation: ${{ steps.validate.outcome }}</b></summary>

            \`\`\`diff
            ${validate}
            \`\`\`

            </details>

            <details><summary><b>Plan: ${{ steps.plan.outcome }}</b></summary>

            \`\`\`diff
            ${plan_output}
            \`\`\`

            </details>

            <details><summary><i>error logs</i></summary>

            \`\`\`diff
            ${errors}
            \`\`\`

            </details>

            <details><summary><i>full plan logs</i></summary>

            \`\`\`diff
            ${full_output}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
            })
            } else {
              github.rest.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: get_tfsec_flags
        id: get_tfsec_flags
        if: success() || failure()
        run: |-
          if [[ -f tfsec.json ]]; then
            flags="--config-file tfsec.json"
          else
            flags=""
          fi
          echo "Setting flags: $flags"
          echo "flags=$flags" >> "$GITHUB_OUTPUT"

      - name: tfsec
        if: success() || failure()
        uses: reviewdog/action-tfsec@master
        with:
          reporter: github-pr-review
          fail_on_error: "false"
          filter_mode: "nofilter" # Check all files, not just the diff
          flags: -tee
          tfsec_version: "v1.28.1"
          tfsec_flags: "${{ steps.get_tfsec_flags.outputs.flags }}"
