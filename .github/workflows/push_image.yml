name: "Build and Push Image"

on:
  workflow_call:
    inputs:
      dockerfile:
        description: Name of the dockerfile to build and push
        required: true
        type: string
      github_ref:
        description: Override of GITHUB_REF environment variable (ie, what branch to run tf against)
        required: false
        type: string
        default: ''
      merge_prs:
        description: Flag to roll up all open PRs
        required: false
        type: boolean
        default: false
      merge_stage_prs:
        description: Flag to roll up open PRs with a "stage" label
        required: false
        type: boolean
        default: false
    secrets:
      CI_BOT_TOKEN:
        description: GITHUB_TOKEN environment variable to run merge_prs script
        required: false
      CI_BOT_USERNAME:
        description: GITHUB_USERNAME environment variable to run merge_prs script
        required: false
      gcp_project_id:
        required: true
      gcp_service_account_key:
        required: true
      k8s_cluster_id:
        required: false
      k8s_cluster_zone:
        required: false
      repository:
        description: Name of the repo within Container Registry to push into
        required: true
      ssh_agent_private_key:
        required: true

jobs:
  Push:
    env:
      GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.CI_BOT_USERNAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref:  ${{ inputs.github_ref }}
          fetch-depth: 0

      - name: User config
        if: ${{ inputs.merge_prs || inputs.merge_stage_prs }}
        run: |-
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Rollup open PRs
        id: rollup_dev
        if: ${{ inputs.merge_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}
          output=$(git rev-parse HEAD)
          echo "::set-output name=stdout::$output"

      - name: Rollup open stage PRs
        id: rollup_stage
        if: ${{ inputs.merge_stage_prs }}
        run: |-
          git checkout origin/main
          echo "Open PRs to deploy:"
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,author,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .author.login }} {{ .mergeable }}
          {{end}}" | sort -n
          echo "-----"
          gh pr list --label=stage --draft=false --base=main --limit=100 --json number,headRefName,mergeable \
            -t "{{ range . }}{{ .number }} {{ .headRefName }} {{ .mergeable }}
          {{end}}" | grep MERGEABLE | sort -n | cut -d ' ' -f2 | xargs -I{} -n1 git merge origin/{}
          output=$(git rev-parse HEAD)
          echo "::set-output name=stdout::$output"

      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.ssh_agent_private_key }}

      - uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - uses: google-github-actions/setup-gcloud@v0 # terraform-bot

      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials, so we can apply against the cluster
      - name: get-credentials
        # Workaround to https://github.com/actions/runner/issues/520
        env:
          HAS_CREDENTIALS: ${{ secrets.k8s_cluster_id && secrets.k8s_cluster_zone }}
        if: env.HAS_CREDENTIALS
        run: |-
          gcloud container clusters get-credentials ${{ secrets.k8s_cluster_id }} --zone ${{ secrets.k8s_cluster_zone }}

      - name: Build and push image
        uses: docker/build-push-action@v1
        with:
          dockerfile: ${{ inputs.dockerfile }}
          username: _json_key
          password: ${{ secrets.gcp_service_account_key }}
          registry: gcr.io
          repository: ${{ secrets.repository }}
          tags: ${{ steps.rollup_stage.outputs.stdout || steps.rollup_dev.outputs.stdout || github.sha }}
