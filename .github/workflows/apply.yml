# Runs `terraform apply` after doing the required authentication and setup.
name: "Apply"

on:
  workflow_call:
    inputs:
      github_ref:
        description: Override of GITHUB_REF environment variable (ie, what branch to run tf against)
        required: false
        type: string
        default: ''
      tf_var_json:
        description: A JSON string to write into terraform.tfvars.json when applying.
        required: false
        type: string
      tf_version:
        description: Which version of terraform to use, eg. 1.1.2 or 0.15.5
        required: true
        type: string
      tf_prefix:
        description: The terraform backend's prefix within the GCS bucket
        required: false
        type: string
      tf_working_directory:
        description: The directory from which to run terraform commands
        required: false
        type: string
    secrets:
      tf_bucket:
        description: The terraform backend's GCS bucket
        required: true
      gcp_project_id:
        required: true
      gcp_service_account_key:
        required: true
      k8s_cluster_id:
        required: false
      k8s_cluster_zone:
        required: false
      ssh_agent_private_key:
        required: true
    outputs:
      apply_output:
        description: The output from running `terraform apply`
        value: ${{ jobs.Apply.outputs.apply_output }}

jobs:
  Apply:
    runs-on: ubuntu-latest
    outputs:
      apply_output: ${{ steps.apply.outputs.stdout }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref:  ${{ inputs.github_ref }}

      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.ssh_agent_private_key }}

      - uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - uses: google-github-actions/setup-gcloud@v0 # terraform-bot

      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials, so we can apply against the cluster
      - name: get-credentials
        # Workaround to https://github.com/actions/runner/issues/520
        env:
          HAS_CREDENTIALS: ${{ secrets.k8s_cluster_id && secrets.k8s_cluster_zone }}
        if: env.HAS_CREDENTIALS
        run: |-
          gcloud container clusters get-credentials ${{ secrets.k8s_cluster_id }} --zone ${{ secrets.k8s_cluster_zone }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |-
          terraform init -backend-config="bucket=${{ secrets.tf_bucket }}" -backend-config="prefix=${{ inputs.tf_prefix }}" -reconfigure
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Apply
        id: apply
        run: |-
          # Write the input to the varfile without substitution
          cat <<- EOF >> terraform.tfvars.json
            ${{ inputs.tf_var_json }}
          EOF
          output=$(terraform apply --auto-approve --input=false)
          output="${output//$'\n'/\%0A}"
          echo "::set-output name=stdout::$output"
        working-directory: ${{ inputs.tf_working_directory }}
