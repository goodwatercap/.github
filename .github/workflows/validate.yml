
name: "Validate"

on:
  workflow_call:
    inputs:
      github_ref:
        description: Override of GITHUB_REF environment variable (ie, what branch to run tf against)
        required: false
        type: string
        default: ''
      post_result_comment:
        default: true
        description: Whether or not to add a comment to the context's PR with the Terraform command results.
        required: false
        type: boolean
      pr_issue_number:
        description: If set, overrides where to send the comments when posting
        required: false
        type: string
        default: ''
      tf_version:
        description: Which version of terraform to use, eg. 1.1.2 or 0.15.5
        required: true
        type: string
      tf_working_directory:
        default: "."
        description: The directory from which to run terraform commands
        required: false
        type: string
    secrets:
      ssh_agent_private_key:
        required: true

jobs:
  Terraform:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref:  ${{ inputs.github_ref }}

      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.ssh_agent_private_key }}

      - name: Get Terraform Version
        id: get_tf_version
        run: |-
          input_version=${{ inputs.tf_version }}
          if [[ -z $input_version ]]; then
            tf_version=`cat .terraform-version`
            echo "Using .terraform-version: $tf_version"
            echo "tf_version=$tf_version" >> "$GITHUB_OUTPUT"
          else
            echo "Using tf_version from input: $input_version"
            echo "tf_version=$input_version" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: |-
          output=$(terraform fmt -diff -no-color)
          if [[ -z $output ]]; then output="No formatting errors found."; fi

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "fmt_output<<$EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
        continue-on-error: true
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.tf_working_directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.tf_working_directory }}

      - uses: actions/github-script@v7
        if: inputs.post_result_comment && (success() || failure())
        with:
          script: |
            const issue_number = "${{ inputs.pr_issue_number }}" || context.issue.number
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Validation')
            })
            const output = `## Terraform Validation
            #### Initialization: Ô∏è${{ steps.init.outcome }}
            #### Format and Style:
            \`\`\`
            ${{ steps.fmt.outputs.fmt_output }}
            \`\`\`
            #### Validation: ${{ steps.validate.outcome }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*
            *Working directory: \`${{ inputs.tf_working_directory }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
            })
            } else {
              github.rest.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: tfsec
        if: success() || failure()
        uses: reviewdog/action-tfsec@master
        with:
          reporter: github-pr-review
          fail_on_error: "false"
          filter_mode: "nofilter" # Check all files, not just the diff
